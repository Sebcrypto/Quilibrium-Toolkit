- name: Install Watchdog
  hosts: "{{ target }}"
  vars:
    watchdog: "{{ node_path }}/watchdog"

  tasks:
    - name: Update and upgrade apt packages
      include_role:
        name: roles/system/update-os
    - name: Install required packages
      become: true
      apt:
        name: 
          - curl
          - python3
          - python3-pip
          - python3-virtualenv
        state: present

    - name: Create watchdog directory
      file:
        path: "{{ watchdog }}"
        state: directory

    - name: Remove previous script
      file:
        path: "{{ watchdog }}/watchdog.py"
        state: absent

    - name: Remove previous requirements
      file:
        path: "{{ watchdog }}/requirements.txt"
        state: absent

    - name: Install watchdog
      copy:
        src: "../../scripts/watchdog/watchdog.py"
        dest: "{{ watchdog }}/watchdog.py"
        owner: "{{ ansible_user }}"

    - name: Install requirements
      copy:
        src: "../../scripts/watchdog/requirements.txt"
        dest: "{{ watchdog }}/requirements.txt"
        owner: "{{ ansible_user }}"

    - name: Create python virtual env and install modules
      pip:
        requirements: "{{ watchdog }}/requirements.txt"
        virtualenv: "{{ watchdog }}/myenv"
        virtualenv_command: virtualenv

    - name: Set watchdog_auto_restart parameter
      ini_file:
        path: "{{ watchdog }}/.env"
        option: AUTO_RESTART
        section: node
        value: "{{ watchdog_auto_restart }}"
        state: present
      when: watchdog_auto_restart is defined and watchdog_auto_restart != None

    - name: Set watchdog_publish_level parameter
      ini_file:
        path: "{{ watchdog }}/.env"
        option: PUBLISH_LEVEL
        section: notification
        value: "{{ watchdog_publish_level }}"
        state: present
      when: watchdog_publish_level is defined and watchdog_publish_level != None

    - name: Set watchdog_telegram_id parameter
      ini_file:
        path: "{{ watchdog }}/.env"
        option: TELEGRAM_USER_ID
        section: notification
        value: "{{ watchdog_telegram_id }}"
        state: present
      when: watchdog_telegram_id is defined and watchdog_telegram_id != None

    - name: Set watchdog_discord_webhook parameter
      ini_file:
        path: "{{ watchdog }}/.env"
        option: DISCORD_WEBHOOK_URL
        section: notification
        value: "{{ watchdog_discord_webhook }}"
        state: present
      when: watchdog_discord_webhook is defined and watchdog_discord_webhook != None

    - name: Install watchdog service
      become: true
      shell: |
        echo '[Unit]
        Description=Quilibrium watchdog service
        After=network.target
        [Service]
        Type=simple
        RestartSec=600s
        WorkingDirectory={{ watchdog }}
        ExecStart={{ watchdog }}/myenv/bin/python3 watchdog.py
        User={{ ansible_user }}
        [Install]
        WantedBy=multi-user.target' > /lib/systemd/system/quilibrium_watchdog.service

        echo '[Unit]
        Description=Run Quilibrium watchdog service every defined period
        After=network.target
        [Timer]
        OnUnitActiveSec={{watchdog_timer | default('60')}}min
        Unit=quilibrium_watchdog.service
        [Install]
        WantedBy=timers.target' > /lib/systemd/system/quilibrium_watchdog.timer

    - name: Enable watchdog service
      become: true
      shell: |
        systemctl daemon-reload
        systemctl enable quilibrium_watchdog.timer
        systemctl restart quilibrium_watchdog.timer
    
